// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  subscription  Subscription?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Portfolio {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                  String   @default("My Portfolio")
  isMain                Boolean  @default(false)
  monthlyDividendGoal   Float?   // Monthly dividend income goal
  annualDividendGoal    Float?   // Annual dividend income goal
  positions             Position[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([userId, isMain])
}

model Position {
  id              String    @id @default(cuid())
  portfolioId     String
  portfolio       Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  ticker          String
  shares          Float
  purchasePrice   Float
  purchaseDate    DateTime
  currentPrice    Float?    // Manual input for MVP
  dividendYield   Float?    // Manual input for MVP
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Cached stock data to avoid redundant API calls
model StockData {
  id              String    @id @default(cuid())
  symbol          String    @unique
  price           Float
  change          Float
  changePercent   Float
  dividendYield   Float?
  lastUpdated     DateTime
  source          String    // 'alpha_vantage' or 'finnhub'
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([symbol])
  @@index([lastUpdated])
}

// Cached dividend data
model DividendData {
  id              String    @id @default(cuid())
  symbol          String    @unique
  dividend        Float
  exDate          String
  recordDate      String
  paymentDate     String
  lastUpdated     DateTime
  source          String    // 'alpha_vantage' or 'finnhub'
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([symbol])
  @@index([lastUpdated])
}

// Subscription management
model Subscription {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId  String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeProductId   String?
  status            String    // 'active', 'canceled', 'incomplete', 'incomplete_expired', 'past_due', 'trialing', 'unpaid'
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

// Newsletter subscriptions
model NewsletterSubscription {
  id                String    @id @default(cuid())
  email             String    @unique
  isConfirmed       Boolean   @default(false)
  confirmationToken String    @unique
  discountCode      String?   @unique
  discountUsed      Boolean   @default(false)
  subscribedAt      DateTime  @default(now())
  confirmedAt       DateTime?
  unsubscribedAt    DateTime?

  @@index([email])
  @@index([confirmationToken])
  @@index([discountCode])
}